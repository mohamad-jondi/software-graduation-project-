// <auto-generated />
using System;
using Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240627002033_pictureuser")]
    partial class pictureuser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.7.21378.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AddressID");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Data.Models.Allergy", b =>
                {
                    b.Property<int>("AllergyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Allergey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("ReactionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AllergyID");

                    b.HasIndex("PatientID");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("Data.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CanceledBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CanceledReson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ChildID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId1")
                        .HasColumnType("int");

                    b.Property<string>("DoctorNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MotherId")
                        .HasColumnType("int");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CaseId");

                    b.HasIndex("ChildID");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("MotherId");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Data.Models.Avaliability", b =>
                {
                    b.Property<int>("AvalibailityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndHour")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartHour")
                        .HasColumnType("time");

                    b.HasKey("AvalibailityID");

                    b.HasIndex("DoctorID");

                    b.ToTable("Avaliabilities");
                });

            modelBuilder.Entity("Data.Models.Case", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChildID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextAppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NurseID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseId");

                    b.HasIndex("ChildID");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NurseID");

                    b.HasIndex("PatientID");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Data.Models.Chat", b =>
                {
                    b.Property<int>("ChatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FirstPartyID")
                        .HasColumnType("int");

                    b.Property<int>("SecondPartyID")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ChatID");

                    b.HasIndex("FirstPartyID");

                    b.HasIndex("SecondPartyID");

                    b.HasIndex("UserId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Data.Models.ChatMessage", b =>
                {
                    b.Property<int>("ChatMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatMessageID");

                    b.HasIndex("ChatID");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Data.Models.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double?>("LatestRecordedHeight")
                        .HasColumnType("float");

                    b.Property<double?>("LatestRecordedWeight")
                        .HasColumnType("float");

                    b.Property<int>("MotherId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MotherId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("Data.Models.Credential", b =>
                {
                    b.Property<int>("CredentialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CredentialType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CredentialValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.HasKey("CredentialID");

                    b.HasIndex("DoctorID");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("Data.Models.Data.Models.Drug", b =>
                {
                    b.Property<int>("DrugID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraindications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DosageForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interactions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("PrescribedByID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RefillInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteOfAdministration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StorageInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TreatmentPlanID")
                        .HasColumnType("int");

                    b.HasKey("DrugID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PrescribedByID");

                    b.HasIndex("TreatmentPlanID");

                    b.ToTable("Drug");
                });

            modelBuilder.Entity("Data.Models.Data.Models.EmergencyContactInfo", b =>
                {
                    b.Property<int>("EmergencyContactInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmergancyContactID")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId1")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmergencyContactInfoID");

                    b.HasIndex("EmergancyContactID");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.HasIndex("PersonId1");

                    b.ToTable("EmergencyContactInfos");
                });

            modelBuilder.Entity("Data.Models.DoctorRating", b =>
                {
                    b.Property<int>("DoctorRatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorRatingID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("UserID");

                    b.ToTable("DoctorRatings");
                });

            modelBuilder.Entity("Data.Models.Documents", b =>
                {
                    b.Property<long>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasMaxLength(26214400)
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("DocumentId");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Data.Models.JWTTokensRefresh", b =>
                {
                    b.Property<int>("JWTTokensRefreshID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("JWTTokensRefreshID");

                    b.HasIndex("UserID");

                    b.ToTable("JWTTokensRefresh");
                });

            modelBuilder.Entity("Data.Models.LifestyleFactors", b =>
                {
                    b.Property<int>("LifestyleFactorsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DietaryPreferences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExerciseHabits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAlcoholConsumer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmoker")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("LifestyleFactorsId");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("LifestyleFactors");
                });

            modelBuilder.Entity("Data.Models.MedicalSecondOpinion", b =>
                {
                    b.Property<int>("SecondOpinionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewingDoctorId")
                        .HasColumnType("int");

                    b.Property<string>("SecondOpinionDiagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SecondOpinionId");

                    b.HasIndex("CaseId");

                    b.HasIndex("ReviewingDoctorId");

                    b.ToTable("MedicalSecondOpinions");
                });

            modelBuilder.Entity("Data.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("Data.Models.Symptoms", b =>
                {
                    b.Property<int>("SymptomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<DateTime>("WhenDidItStart")
                        .HasColumnType("datetime2");

                    b.HasKey("SymptomID");

                    b.HasIndex("CaseId");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("Data.Models.Test", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Results")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestID");

                    b.HasIndex("CaseId");

                    b.HasIndex("PatientID");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RandomStringEmailConfirmations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Data.Models.Vaccination", b =>
                {
                    b.Property<int>("VaccinationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdministeredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChildID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ShotsLeft")
                        .HasColumnType("int");

                    b.Property<int>("VaccineStatus")
                        .HasColumnType("int");

                    b.HasKey("VaccinationID");

                    b.HasIndex("ChildID");

                    b.HasIndex("PatientId");

                    b.ToTable("Vaccinations");
                });

            modelBuilder.Entity("TreatmentPlan", b =>
                {
                    b.Property<int>("TreatmentPlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("DrugUsage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentPlanID");

                    b.HasIndex("CaseID")
                        .IsUnique();

                    b.ToTable("TreatmentPlan");
                });

            modelBuilder.Entity("Data.Models.Person", b =>
                {
                    b.HasBaseType("Data.Models.User");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double?>("LatestRecordedHeight")
                        .HasColumnType("float");

                    b.Property<double?>("LatestRecordedWeight")
                        .HasColumnType("float");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonType")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Data.Models.Doctor", b =>
                {
                    b.HasBaseType("Data.Models.Person");

                    b.Property<int>("DoctorWorkType")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("Data.Models.Mother", b =>
                {
                    b.HasBaseType("Data.Models.Person");

                    b.HasDiscriminator().HasValue("Mother");
                });

            modelBuilder.Entity("Data.Models.Nurse", b =>
                {
                    b.HasBaseType("Data.Models.Person");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("Data.Models.Patient", b =>
                {
                    b.HasBaseType("Data.Models.Person");

                    b.Property<int>("EmergancyContactID")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("Data.Models.Address", b =>
                {
                    b.HasOne("Data.Models.User", "user")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Data.Models.Allergy", b =>
                {
                    b.HasOne("Data.Models.Patient", "Patient")
                        .WithMany("Allergies")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Data.Models.Appointment", b =>
                {
                    b.HasOne("Data.Models.Case", null)
                        .WithMany("Appointments")
                        .HasForeignKey("CaseId");

                    b.HasOne("Data.Models.Child", "childPAtient")
                        .WithMany("Appointments")
                        .HasForeignKey("ChildID");

                    b.HasOne("Data.Models.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Doctor", null)
                        .WithMany("CallenderAppointments")
                        .HasForeignKey("DoctorId1");

                    b.HasOne("Data.Models.Mother", null)
                        .WithMany("CallenderAppointments")
                        .HasForeignKey("MotherId");

                    b.HasOne("Data.Models.Nurse", null)
                        .WithMany("CallenderAppointments")
                        .HasForeignKey("NurseId");

                    b.HasOne("Data.Models.Patient", "Patient")
                        .WithMany("CallenderAppointments")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("childPAtient");
                });

            modelBuilder.Entity("Data.Models.Avaliability", b =>
                {
                    b.HasOne("Data.Models.Doctor", "Doctor")
                        .WithMany("Avalible")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Data.Models.Case", b =>
                {
                    b.HasOne("Data.Models.Child", "Child")
                        .WithMany("Cases")
                        .HasForeignKey("ChildID");

                    b.HasOne("Data.Models.Doctor", "Doctor")
                        .WithMany("Cases")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Patient", "Patient")
                        .WithMany("cases")
                        .HasForeignKey("PatientID");

                    b.Navigation("Child");

                    b.Navigation("Doctor");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Data.Models.Chat", b =>
                {
                    b.HasOne("Data.Models.User", "FirstParty")
                        .WithMany()
                        .HasForeignKey("FirstPartyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.User", "SecondParty")
                        .WithMany()
                        .HasForeignKey("SecondPartyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.User", null)
                        .WithMany("Chats")
                        .HasForeignKey("UserId");

                    b.Navigation("FirstParty");

                    b.Navigation("SecondParty");
                });

            modelBuilder.Entity("Data.Models.ChatMessage", b =>
                {
                    b.HasOne("Data.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Data.Models.Child", b =>
                {
                    b.HasOne("Data.Models.Mother", "Parent")
                        .WithMany("childrens")
                        .HasForeignKey("MotherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.Models.Credential", b =>
                {
                    b.HasOne("Data.Models.Doctor", "Doctor")
                        .WithMany("credential")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Data.Models.Data.Models.Drug", b =>
                {
                    b.HasOne("Data.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Doctor", "PrescribedBy")
                        .WithMany()
                        .HasForeignKey("PrescribedByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreatmentPlan", null)
                        .WithMany("Drugs")
                        .HasForeignKey("TreatmentPlanID");

                    b.Navigation("Patient");

                    b.Navigation("PrescribedBy");
                });

            modelBuilder.Entity("Data.Models.Data.Models.EmergencyContactInfo", b =>
                {
                    b.HasOne("Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("EmergancyContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Patient", "Patient")
                        .WithOne("EmergancyContact")
                        .HasForeignKey("Data.Models.Data.Models.EmergencyContactInfo", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Person", null)
                        .WithMany("EmergencyContactInfo")
                        .HasForeignKey("PersonId1");

                    b.Navigation("Patient");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Data.Models.DoctorRating", b =>
                {
                    b.HasOne("Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorRatings")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.Documents", b =>
                {
                    b.HasOne("Data.Models.Case", null)
                        .WithMany("RelatedDocuments")
                        .HasForeignKey("CaseId");

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("RelatedDocumtents")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.JWTTokensRefresh", b =>
                {
                    b.HasOne("Data.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Data.Models.LifestyleFactors", b =>
                {
                    b.HasOne("Data.Models.Patient", "Patient")
                        .WithOne("LifestyleFactors")
                        .HasForeignKey("Data.Models.LifestyleFactors", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Data.Models.MedicalSecondOpinion", b =>
                {
                    b.HasOne("Data.Models.Case", "Case")
                        .WithMany("SecondOpinionRequests")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Doctor", "ReviewingDoctor")
                        .WithMany()
                        .HasForeignKey("ReviewingDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("ReviewingDoctor");
                });

            modelBuilder.Entity("Data.Models.Picture", b =>
                {
                    b.HasOne("Data.Models.User", "User")
                        .WithOne("picture")
                        .HasForeignKey("Data.Models.Picture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.Symptoms", b =>
                {
                    b.HasOne("Data.Models.Case", null)
                        .WithMany("symptoms")
                        .HasForeignKey("CaseId");
                });

            modelBuilder.Entity("Data.Models.Test", b =>
                {
                    b.HasOne("Data.Models.Case", null)
                        .WithMany("Tests")
                        .HasForeignKey("CaseId");

                    b.HasOne("Data.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Data.Models.Vaccination", b =>
                {
                    b.HasOne("Data.Models.Child", "Child")
                        .WithMany("Vaccination")
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Patient", null)
                        .WithMany("Vaccinations")
                        .HasForeignKey("PatientId");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("TreatmentPlan", b =>
                {
                    b.HasOne("Data.Models.Case", "Case")
                        .WithOne("TreatmentPlan")
                        .HasForeignKey("TreatmentPlan", "CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Data.Models.Case", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("RelatedDocuments");

                    b.Navigation("SecondOpinionRequests");

                    b.Navigation("Tests");

                    b.Navigation("TreatmentPlan")
                        .IsRequired();

                    b.Navigation("symptoms");
                });

            modelBuilder.Entity("Data.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Data.Models.Child", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Cases");

                    b.Navigation("Vaccination");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Chats");

                    b.Navigation("RelatedDocumtents");

                    b.Navigation("picture")
                        .IsRequired();
                });

            modelBuilder.Entity("TreatmentPlan", b =>
                {
                    b.Navigation("Drugs");
                });

            modelBuilder.Entity("Data.Models.Person", b =>
                {
                    b.Navigation("EmergencyContactInfo");
                });

            modelBuilder.Entity("Data.Models.Doctor", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("Avalible");

                    b.Navigation("CallenderAppointments");

                    b.Navigation("Cases");

                    b.Navigation("DoctorRatings");

                    b.Navigation("credential");
                });

            modelBuilder.Entity("Data.Models.Mother", b =>
                {
                    b.Navigation("CallenderAppointments");

                    b.Navigation("childrens");
                });

            modelBuilder.Entity("Data.Models.Nurse", b =>
                {
                    b.Navigation("CallenderAppointments");
                });

            modelBuilder.Entity("Data.Models.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("CallenderAppointments");

                    b.Navigation("EmergancyContact");

                    b.Navigation("LifestyleFactors")
                        .IsRequired();

                    b.Navigation("Vaccinations");

                    b.Navigation("cases");
                });
#pragma warning restore 612, 618
        }
    }
}
